use bevy::prelude::Transform;
use bevy_math::{Mat4, Quat, Vec3};
use bevy_reflect::{FromReflect, Reflect};

#[derive(Reflect, FromReflect)]
pub enum TransformProxy {
    Identity,
    FromXYZ((f32, f32, f32)),
    FromMatrix(Mat4),
    FromTranslation(Vec3),
    FromRotation(Quat),
    FromScale(Vec3),
    LookingAt((Transform, Vec3, Vec3)),
    WithTranslation((Transform, Vec3)),
    WithRotation((Transform, Quat)),
    WithScale((Transform, Vec3)),
    ComputeMatrix(Transform),
    ComputeAffine(Transform),
    LocalX(Transform),
    Left(Transform),
    Right(Transform),
    LocalY(Transform),
    Up(Transform),
    Down(Transform),
    LocalZ(Transform),
    Forward(Transform),
    Back(Transform),
    Rotate((Transform, Quat)),
    RotateAxis((Transform, Vec3, f32)),
    RotateX((Transform, f32)),
    RotateY((Transform, f32)),
    RotateZ((Transform, f32)),
    RotateLocal((Transform, Quat)),
    RotateLocalAxis((Transform, Vec3, f32)),
    RotateLocalX((Transform, f32)),
    RotateLocalY((Transform, f32)),
    RotateLocalZ((Transform, f32)),
    TranslateAround((Transform, Vec3, Quat)),
    RotateAround((Transform, Vec3, Quat)),
    LookAt((Transform, Vec3, Vec3)),
    MulTransform((Transform, Transform)),
    MulVec3((Transform, Vec3)),
    ApplyNonUniformScale((Transform, Vec3)),
}
